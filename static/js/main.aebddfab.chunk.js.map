{"version":3,"sources":["services/Error-handler.js","services/sanitize-input.js","App.js","services/Binary-to-decimal.js","index.js","assets/cog.svg"],"names":["binaryRegExp","checkError","value","error","match","length","sanitizeInput","split","map","e","join","App","useState","input","setInput","setError","result","setResult","loading","setLoading","inputChangeHandler","a","formSubmitHandler","reverse","i","reduce","acc","val","setTimeout","className","src","cog","alt","htmlFor","name","placeholder","onChange","target","type","onClick","preventDefault","ReactDOM","render","document","getElementById","module","exports"],"mappings":"iPAAA,IAAMA,EAAe,iBAgBNC,MAdf,SAAoBC,GAWlB,MAAO,CAAEC,MATyB,OAA9BD,EAAME,MAAMJ,GACN,GAEJE,EAAMG,OAAS,GACT,+BAEA,wCCVC,SAASC,EAAcJ,GACpC,OAAOA,EACJK,MAAM,IACNC,KAAI,SAAAC,GACH,MAAU,MAANA,GAAmB,MAANA,EACRA,EAEF,MAERC,KAAK,I,oBC4DKC,MA/Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENT,EAFM,KAECY,EAFD,OAGeH,mBAAS,IAHxB,mBAGNI,EAHM,KAGEC,EAHF,OAIiBL,oBAAS,GAJ1B,mBAINM,EAJM,KAIGC,EAJH,KAKPC,EAAkB,uCAAG,WAAMlB,GAAN,iBAAAmB,EAAA,6DACzBP,EAASR,EAAcJ,IACvBe,EAAU,IAFe,SAGDhB,EAAWC,GAHV,gBAGjBC,EAHiB,EAGjBA,MACRY,EAASZ,GAJgB,2CAAH,sDAOlBmB,EAAiB,uCAAG,gCAAAD,EAAA,sEACApB,EAAWY,GADX,mBAEV,MADNV,EADgB,EAChBA,OADgB,wBAGtBgB,GAAW,GAHW,SAIuBN,ECpB9CN,MAAM,IACNgB,UACAf,KAAI,SAACC,EAAGe,GAAJ,OAAUf,EAAC,SAAG,EAAKe,MACvBC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,KDaJ,OAIhBzB,EAJgB,OAKtB0B,YAAW,WACTX,EAAUf,GACViB,GAAW,KACV,KARmB,QAUxBJ,EAASZ,GAVe,4CAAH,qDAYvB,OACE,yBAAK0B,UAAU,OACb,2DACA,yBAAKA,UAAU,WACZX,GACC,yBAAKW,UAAU,qBACb,yBAAKC,IAAKC,IAAKC,IAAI,gBAGvB,8BACE,yBAAKH,UAAU,gBACb,2BAAOI,QAAQ,SAAf,aACA,2BACEC,KAAK,QACLC,YAAY,gBACZjC,MAAOW,EACPuB,SAAU,gBAAalC,EAAb,EAAGmC,OAAUnC,MAAb,OAA2BkB,EAAmBlB,MAE1D,2BAAO2B,UAAU,iBAAiB1B,IAEpC,4BACEmC,KAAK,SACLC,QAAS,SAAA9B,GACPA,EAAE+B,iBACFlB,MAJJ,YAUF,yBAAKO,UAAU,UAAf,UAEE,8BAAOb,OEzDjByB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.aebddfab.chunk.js","sourcesContent":["const binaryRegExp = /^[0-1]{1,32}$/g;\n\nfunction checkError(value) {\n  let error = '';\n  if (value.match(binaryRegExp) !== null) {\n    error = '';\n  } else {\n    if (value.length > 32) {\n      error = 'upto 32-bits supported here!';\n    } else {\n      error = 'please enter a valid binary number!';\n    }\n  }\n  return { error };\n}\n\nexport default checkError;\n","export default function sanitizeInput(value) {\n  return value\n    .split('')\n    .map(e => {\n      if (e === '1' || e === '0') {\n        return e;\n      }\n      return '';\n    })\n    .join('');\n}\n","import React, { useState } from 'react';\nimport binaryToDecimalConverter from './services/Binary-to-decimal';\nimport checkError from './services/Error-handler';\nimport sanitizeInput from './services/sanitize-input';\nimport cog from './assets/cog.svg';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [error, setError] = useState('');\n  const [result, setResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  const inputChangeHandler = async value => {\n    setInput(sanitizeInput(value));\n    setResult('');\n    const { error } = await checkError(value);\n    setError(error);\n  };\n\n  const formSubmitHandler = async () => {\n    const { error } = await checkError(input);\n    if (error === '') {\n      setLoading(true);\n      const value = await binaryToDecimalConverter(input);\n      setTimeout(() => {\n        setResult(value);\n        setLoading(false);\n      }, 1000);\n    }\n    setError(error);\n  };\n  return (\n    <div className='App'>\n      <h1>binary to decimal converter</h1>\n      <div className='wrapper'>\n        {loading && (\n          <div className='loading-animation'>\n            <img src={cog} alt='loading...' />\n          </div>\n        )}\n        <form>\n          <div className='form-control'>\n            <label htmlFor='input'>numbers :</label>\n            <input\n              name='input'\n              placeholder='Enter Here...'\n              value={input}\n              onChange={({ target: { value } }) => inputChangeHandler(value)}\n            />\n            <small className='error-subtext'>{error}</small>\n          </div>\n          <button\n            type='submit'\n            onClick={e => {\n              e.preventDefault();\n              formSubmitHandler();\n            }}\n          >\n            convert\n          </button>\n        </form>\n        <div className='result'>\n          result:\n          <span>{result}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function binaryToDecimalConverter(binary) {\n  return binary\n    .split('')\n    .reverse()\n    .map((e, i) => e * 2 ** i)\n    .reduce((acc, val) => acc + val);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/cog.84b58254.svg\";"],"sourceRoot":""}